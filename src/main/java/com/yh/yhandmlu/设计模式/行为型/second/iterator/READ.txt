迭代器模式（Iterator Pattern）

提供了一个方法，来访问聚合对象，而不用暴露对象的内部表示；又称游标（Cursor ）；

聚合：管理+组织数据对象的数据结构；

聚合对象两大职责：
1、存储内部数据；
2、遍历内部数据

将遍历聚合对象内部数据的行为提取出来，封装到一个迭代器中，通过专门的迭代器来遍历聚合对象中的内部数据；

迭代器模式是单一职责的完美体现；

优点：
1、支持以不同的方式遍历一个聚合对象。
2、迭代器简化了聚合类。
3、在同一个聚合上可以有多个遍历。
4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足“开闭原则”的要求

缺点：
由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，
类的个数成对增加，这在一定程度上增加了系统的复杂性。

使用场景：
1、访问一个聚合对象的内容而无须暴露它的内部表示。
2、需要为聚合对象提供多种遍历方式。
3、为遍历不同的聚合结构提供一个统一的接口。