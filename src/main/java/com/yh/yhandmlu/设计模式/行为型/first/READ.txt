1、父类与子类之间实现
        策略模式(strategy)
        模板方法模式（Template Method）

------------------------------------------------------------------------------------------


策略模式

定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。
需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，

策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装。
因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。

主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。

何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。

如何解决：将这些算法封装成一个一个的类，任意地替换。

关键代码：实现同一个接口。

应用实例：
1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。
2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。
3、JAVA AWT 中的 LayoutManager。

优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。

缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。

使用场景：
1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。
2、一个系统需要动态地在几种算法中选择一种。
3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。

注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。


------------------------------------------------------------------------------------------

模板方法模式

一个抽象类中，有一个主方法，再定义1...n个方法，可以是抽象的，也可以是实际的方法，
定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用


主要解决：一些方法通用，却在每一个子类都重新写了这一方法。

何时使用：有一些通用的方法。

如何解决：将这些通用算法抽象出来。

关键代码：在抽象类实现，其他步骤在子类实现。

应用实例：
1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。
2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。
3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。

优点：
1、封装不变部分，扩展可变部分。
2、提取公共代码，便于维护。
3、行为由父类控制，子类实现。

缺点：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。

使用场景：
1、有多个子类共有的方法，且逻辑相同。
2、重要的、复杂的方法，可以考虑作为模板方法。

注意事项：为防止恶意操作，一般模板方法都加上 final 关键词。

------------------------------------------------------------------------------------------

这两天在想，感觉模板方法和侧罗方法很相似。

仔细看下概念

模板方法意图：
定义一个算法流程（抽象类），将一些特定步骤中的具体实现，留给了子类去完成，延迟到子类；
在不改变算法流程的情况下，使不同的子类，来实现定制流程中的步骤；

模板方法强调：
1、定义一条线，即我们说的算法流程，线上多个点，每个点就是一些方法（算法），多个点会按照流程被执行，具体看子类
2、走整个流程下来，入口只有一个；

策略模式的意图：
使不同的算法可以被相互替换，而不影响客户端的使用；
一个接口，为一系列的方法提供统一的方法；
一个抽象类，提供辅助函数；
多个具体子类去实现这个接口，继承抽象类；

策略模式强调：
每一个策略都是一个完整的流程（算法）；

这样就清晰了一些；




