
抽象工厂模式：
多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。
一个抽象工厂类，可以派生出多个具体工厂类。
每个具体工厂类可以创建多个具体产品类的实例，也就是创建的是一个产品线下的多个产品。

区别：
工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。
工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。
工厂方法创建 "一种" 产品，他的着重点在于"怎么创建"，也就是说如果你开发，你的大量代
码很可能围绕着这种产品的构造，初始化这些细节上面。也因为如此，类似的产品之间有很多可以复用的特征，
所以会和模版方法相随。


抽象工厂就像工厂，而工厂方法则像是工厂的一种产品生产线

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------


抽象工厂(PcFactory)，创建的产品是一个产品族，电脑厂商不止生产鼠标，还生产键盘等等

戴尔厂商(DellFactory) 可以生产鼠标(DellMouse)+键盘(DellKeyBorad)
惠普厂商(HpFactory) 可以生产鼠标(HpMouse)+键盘(HpMouse)

所以抽象工厂模式，我们要比 工厂方法，多一个抽象工厂，由各种厂商去实现；

每个厂商生产不同产品；


抽象工厂与工厂方法的区别：
1、当产品只是一个的时候，比如只有鼠标，抽象工厂就是工厂方法；
2、当产品是多个，形成一个产品族时，工厂方法就是抽象工厂；

优点：易扩展，在不修改老逻辑前提下；


当后面华硕厂商需要生产鼠标+键盘，
直接新增一个HsFactory实现 PcFactory
新增HsMouse 实现 Mouse
信息HsKeyBorad 实现KeyBorad即可；

当整个产品族新增 耳机，

接口：（抽象产品） ErJi
具体实现：
HpErJi
DellErji
HsErji

在每个具体工厂类中，新增创建ErJi方法即可；

易扩展，加新需求，改动小，不会担心影响老功能；


参考链接：
http://www.runoob.com/design-pattern/abstract-factory-pattern.html

后面追加的笔记很棒；