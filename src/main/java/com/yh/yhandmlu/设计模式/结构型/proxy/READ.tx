代理模式（Proxy Pattern）
给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate

什么是代理？
一个客户不想或者不能直接引用一个对象，此时可以通过一个称之为“代理”的第三者来实现间接引用。
代理对象可以在客户端和目标对象之间起到中介的作用，并且可以通过代理对象去掉客户不能看到的内容和服务或者添加客户需要的额外服务。

通过引入代理对象来间接访问一个对象；

比如广告商想找刘德华拍广告，广告商直接找刘德华的助理就OK了；

优点：
1、能够协调调用者和被调用者，降低系统耦合度   ；
2、可以控制对真实对象的访问权限；

1、职责清晰。 2、高扩展性。 3、智能化。

缺点：

客户端与真实对象之间增加了代理对象，增加额外工作；

使用场景：按职责来划分，通常有以下使用场景：
    1、远程代理。
        为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又叫做大使(Ambassador)。

    2、虚拟代理。
        如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。

    3、Copy-on-Write 代理。
        它是虚拟代理的一种，把复制（克隆）操作延迟到只有在客户端真正需要时才执行。一般来说，对象的深克隆是一个开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆。

    4、保护（Protect or Access）代理。
        控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限

    5、Cache代理。
        为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果。

    6、防火墙（Firewall）代理。
        保护目标不让恶意用户接近。

    7、同步化（Synchronization）代理。
        使几个用户能够同时使用一个对象而没有冲突。

    8、智能引用（Smart Reference）代理。
        当一个对象被引用时，提供一些额外的操作，如将此对象被调用的次数记录下来等。


注意事项：
1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。
2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。
-------------------------------------------------


Java RMI（Remote Method Invocation 远程方法调用）

JVM --》 TCP --》 Remote JVM

spring 的aop ,使用了动态代理 （Dynamic Proxy）

##JDK动态代理

Java动态代理实现相关类位于java.lang.reflect包，主要涉及两个类：
1、InvocationHandler接口。它是代理实例的调用处理程序实现的接口，该接口中定义了如下方法：public Object invoke (Object proxy, Method method, Object[] args) throws Throwable;invoke()方法中第一个参数proxy表示代理类，第二个参数method表示需要代理的方法，第三个参数args表示代理方法的参数数组。
2、Proxy类。该类即为动态代理类，该类最常用的方法为：public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException。newProxyInstance()方法用于根据传入的接口类型interfaces返回一个动态创建的代理类的实例，方法中第一个参数loader表示代理类的类加载器，第二个参数interfaces表示代理类实现的接口列表（与真实主题类的接口列表一致），第三个参数h表示所指派的调用处理程序类。

java.lang.reflect.Proxy:生成动态代理类和对象；
java.lang.reflect.InvocationHandler（处理器接口）：可以通过invoke方法实现
对真实角色的代理访问。

每次通过 Proxy 生成的代理类对象都要指定对应的处理器对象。

##cglib 动态代理
动态代理是针对代理的类, 动态生成一个子类, 然后子类覆盖代理类中的方法, 如果是private或是final类修饰的方法,则不会被重写。

CGLIB是一个功能强大，高性能的代码生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。通常可以使用Java的动态代理创建代理，但当要代理的类没有实现接口或者为了更好的性能，CGLIB是一个好的选择。

CGLIB作为一个开源项目，其代码托管在github，地址为：https://github.com/cglib/cglib

##aop

可以参考这个包下的demo「com.yh.yhandmlu.代理」

http://www.runoob.com/design-pattern/proxy-pattern.html





