类的适配器模式：
当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，
创建一个新类，继承原有的类，实现新的接口即可。

对象的适配器模式：
当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，
持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。

接口的适配器模式：
当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，
实现所有方法，我们写别的类的时候，继承抽象类即可。

优点：
1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。

缺点：
1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。

使用场景：
有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。

注意事项：
适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。

《感觉实际使用场景并不多。》